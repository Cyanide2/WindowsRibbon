using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
//using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;
using System.IO;
using System.Xml;

namespace RibbonGenerator
{
    class CSharpCodeBuilder
    {
        private const string IdentString = "    ";
        private const string RibbonItems = "RibbonItems";

        //lists build from .xml file
        //in pair1List are only keys and values they are not in pair3List
        //private IList<KeyValuePair<string, string>> pair1List; //Command Name, Command Id
        //private IList<KeyValuePair<string, string>> pair2List; //Command Name, RibbonControl class name

        //list build from .h file
        //private IList<KeyValuePair<string, string>> pair3List; //Command Name, Command Id
        private IList<string> popupCommandNames; //

        private IList<RibbonItem> ribbonItems;

        private string ribbonItemsClass;
        private bool hasHFile;

        /// <summary>
        /// Method builds a C# file RibbonItems.Designer.cs
        /// </summary>
        /// <param name="path">RibbonMarkup.xml with path</param>
        public void Execute(string path)
        {
            //string @namespace = System.Reflection.Assembly.GetEntryAssembly().EntryPoint.DeclaringType.Namespace;
            if (File.Exists(path))
            {
                string directory = Path.GetDirectoryName(path);

                string xmlFileName = Path.GetFileNameWithoutExtension(path);
                char last = xmlFileName[xmlFileName.Length - 1];
                if (Char.IsNumber(last))
                {
                    ribbonItemsClass = RibbonItems + last.ToString();
                }
                else
                {
                    ribbonItemsClass = RibbonItems;
                }

                RibbonParser parser = new RibbonParser(path);

                RibbonParser.ParseResult results = parser.Results;
                //pair1List = (results.Pair1List);
                //pair2List = (results.Pair2List);
                //pair3List = (results.Pair3List);
                //popupCommandNames = (results.PopupCommandNames);

                popupCommandNames = new List<string>();
                ribbonItems = results.RibbonItems;
                hasHFile = results.HasHFile;

                WriteCsFile(directory);
            }
        }

        private String Ident(int count)
        {
            StringBuilder result = new StringBuilder(string.Empty);
            for (int i = 0; i < count; i++)
            {
                result.Append(IdentString);
            }
            return result.ToString();
        }

        private void WriteCsFile(string path)
        {
            StreamWriter sw = CreateCsFile(Path.Combine(path, ribbonItemsClass + ".Designer.cs"));
            WriteConst(sw);
            WritePopupConst(sw);
            WriteProperties(sw);
            WriteConstructor(sw);
            CloseCsFile(sw);
        }

        private StreamWriter CreateCsFile(string path)
        {
            StreamWriter sw = File.CreateText(path);
            sw.WriteLine("//------------------------------------------------------------------------------");
            sw.WriteLine("// <auto-generated>");
            sw.WriteLine("//     This code was generated by a tool.");
            sw.WriteLine("//     Runtime Version:");
            sw.WriteLine("//");
            sw.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            sw.WriteLine("//     the code is regenerated.");
            sw.WriteLine("// </auto-generated>");
            sw.WriteLine("//------------------------------------------------------------------------------");
            sw.WriteLine();
            sw.WriteLine("using System;");
            sw.WriteLine("using RibbonLib;");
            sw.WriteLine("using RibbonLib.Controls;");
            sw.WriteLine("using RibbonLib.Interop;");
            sw.WriteLine();
            sw.WriteLine("namespace RibbonLib.Controls");
            sw.WriteLine("{");
            sw.WriteLine(Ident(1) + "partial class " + ribbonItemsClass);
            sw.WriteLine(Ident(1) + "{");
            return sw;
        }

        private void WriteConst(StreamWriter sw)
        {
            if (!hasHFile)
            {
                sw.WriteLine("// Warning: *.h file does not exist. The commands maybe incomplete !!!");
                sw.WriteLine();
            }
            sw.WriteLine(Ident(2) + "private static class Cmd");
            sw.WriteLine(Ident(2) + "{");
            for (int i = 0; i < ribbonItems.Count; i++)
            {
                RibbonItem ribbonItem = ribbonItems[i];
                if (ribbonItem.IsContextPopup)
                    popupCommandNames.Add(ribbonItem.CommandName);
                sw.WriteLine(Ident(3) + "public const uint " + ribbonItem.CommandName + " = " + ribbonItem.CommandId.ToString(CultureInfo.InvariantCulture) + ";");
            }
            sw.WriteLine(Ident(2) + "}");
            sw.WriteLine();
        }

        private void WritePopupConst(StreamWriter sw)
        {
            sw.WriteLine(Ident(2) + "// ContextPopup CommandName");
            for (int i = 0; i < popupCommandNames.Count; i++)
            {
                string name = popupCommandNames[i];
                sw.WriteLine(Ident(2) + "public const uint " + name + " = Cmd." + name + ";");
            }
            sw.WriteLine();
        }

        private void WriteProperties(StreamWriter sw)
        {
            sw.WriteLine(Ident(2) + "private static bool initialized;");
            sw.WriteLine();
            sw.WriteLine(Ident(2) + "public " + "Ribbon" + " " + "Ribbon" + " { get; private set; }");
            for (int i = 0; i < ribbonItems.Count; i++)
            {
                RibbonItem ribbonItem = ribbonItems[i];
                if (!(ribbonItem.IsContextPopup))
                {
                    string name = GetPropertyName(ribbonItem.CommandName);
                    sw.WriteLine(Ident(2) + "public " + ribbonItem.RibbonClassName + " " + name + " { get; private set; }");
                }
            }
            sw.WriteLine();
        }

        private void WriteConstructor(StreamWriter sw)
        {
            sw.WriteLine(Ident(2) + "public " + ribbonItemsClass + "(Ribbon ribbon)");
            sw.WriteLine(Ident(2) + "{");
            sw.WriteLine(Ident(3) + "if (ribbon == null)");
            sw.WriteLine(Ident(4) + "throw new ArgumentNullException(nameof(ribbon), \"Parameter is null\");");
            sw.WriteLine(Ident(3) + "if (initialized)");
            sw.WriteLine(Ident(4) + "return;");
            sw.WriteLine(Ident(3) + "this.Ribbon = ribbon;");
            for (int i = 0; i < ribbonItems.Count; i++)
            {
                RibbonItem ribbonItem = ribbonItems[i];
                if (!(ribbonItem.IsContextPopup))
                {
                    string name = GetPropertyName(ribbonItem.CommandName);
                    sw.WriteLine(Ident(3) + name + " = new " + ribbonItem.RibbonClassName + "(ribbon, " + "Cmd." + ribbonItem.CommandName + ");");
                }
            }

            sw.WriteLine(Ident(3) + "initialized = true;");
            sw.WriteLine(Ident(2) + "}");
            sw.WriteLine();
        }

        private void CloseCsFile(StreamWriter sw)
        {
            sw.WriteLine(Ident(1) + "}");
            sw.WriteLine("}");
            sw.Close();
        }

        private string GetPropertyName(string commandName)
        {
            string result;
            if (commandName.StartsWith("cmd", StringComparison.InvariantCultureIgnoreCase))
            {
                result = commandName.Substring(3);
            }
            else
            {
                result = commandName;
            }
            return result;
        }
    }
}
